{"version":3,"sources":["svg/github-logo.svg","svg/rain.svg","svg/sun.svg","components/Layout.js","components/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","className","role","aria-label","href","src","github","alt","Layout","children","degree","WeatherCard","string","data","toMenu","id","name","weather","main","temp","feels_like","toFahrenheit","celsius","sys","country","roundTemp","temperature","Math","round","icon","description","charAt","toUpperCase","slice","onClick","rain","App","setState","loaded","city","getWeather","fetch","method","headers","body","JSON","stringify","state","then","res","json","console","log","weatherData","catch","err","this","unit","type","onChange","event","target","value","placeholder","sun","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.94a34ab6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github-logo.f1e77217.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.086fb7ad.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun.fdd37e8a.svg\";","import React from \"react\";\nimport github from '../svg/github-logo.svg';\n\nconst Footer = () =>\n    <footer className=\"bg-blue-900 text-white text-center pt-4 pb-2\">\n      <h3 className=\"text-sm sm:text-base\">Made with <span role=\"img\" aria-label=\"love\">❤️</span> by Sebastián Leal, 2020</h3>\n      <nav className=\"flex justify-center my-2\">\n        <a href=\"https://github.com/achilleleal/weather-app\">\n          <img src={github} alt=\"github\" className=\"w-8 duration-300 transform hover:scale-110\"/>\n        </a>\n      </nav>\n    </footer>\n\n\nconst Layout = ({ children }) => \n    <>\n        <main className=\"flex justify-center items-center text-center text-white\">\n            {children}\n        </main>\n        <Footer />\n    </>\n\n\nexport default Layout;","import React from 'react'\nimport rain from '../svg/rain.svg'\n\nlet degree = \"ºC\";\n\nconst WeatherCard = ({ data, toMenu }) => {\n\n    if (data.id) {\n\n        const { name, weather, main } = data;\n        let { temp, feels_like } = main;\n\n        const toFahrenheit = celsius => (celsius * 9/5) + 32;\n\n        if (data.sys.country === 'US') {\n            degree = \"ºF\";\n            temp = toFahrenheit(temp);\n            feels_like = toFahrenheit(feels_like);\n        }\n\n        // The description is all in lower case. This function capitalizes only the first letter, for formatting\n        const capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n        // Rounds the temperature to have only 1 decimal place\n        const roundTemp = temperature => Math.round(temperature * 10) / 10;\n    \n        return(\n            <div>\n                <div className=\"card duration-500 transform hover:scale-105\">\n                    <div className=\"font-bold\">\n                        <h1 className=\"text-3xl sm:text-4xl lg:text-5xl border-b-4 border-solid border-blue-400\" >{name}</h1>\n                        <img src={`https://api.openweathermap.org/img/w/${weather[0].icon}`} \n                            alt={weather[0].main}\n                            className=\"w-16 mx-auto\"/> \n                        <h2 className=\"text-2xl sm:text-3xl lg:text-4xl\">{weather[0].main}</h2>\n                    </div>\n                    <div>\n                    <h3 className=\"text-xl sm:text-2xl lg:text-3xl\">{capitalizeFirstLetter(weather[0].description)}</h3>\n                        <h3 className=\"text-md sm:text-xl\">{roundTemp(temp)} {degree}, feels like {roundTemp(feels_like)} {degree}</h3>\n                    </div>\n                </div>\n                <button onClick={toMenu} className=\"button\">To menu</button>\n            </div>\n        );\n\n    } else {\n        return(\n            <div className=\"card\">\n                <h1 className=\"text-md sm:text-2xl\">Oops, something went wrong</h1>\n                <img src={rain} alt=\"\" className=\"w-8 sm:w-16 mx-auto\" />\n                <button onClick={toMenu} className=\"button\">Try again</button>\n            </div>\n        );\n    }\n}\n    \n\nexport default WeatherCard;\n","import React, { Component } from 'react';\nimport Layout from './components/Layout';\nimport WeatherCard from './components/WeatherCard';\nimport sun from './svg/sun.svg';\nimport './styles/App.css';\nimport './styles/styles.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      loaded: false,\n      city: '',\n      weatherData: {}\n    }\n  }\n\n  toMenu = () => {\n    this.setState({loaded: false, city: ''})\n  }\n\n  getWeather = () => {\n    fetch('https://weather-apiserver.herokuapp.com/weather', {\n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        city: this.state.city\n      })\n    })\n    .then(res => res.json())\n    .then(data => {\n      console.log(data);\n      this.setState({weatherData: data, loaded: true})\n    })\n    .catch(err => console.log(err));\n  }\n\n  render() {\n    const { loaded, unit, weatherData } = this.state;\n    \n    return (\n      <Layout>\n          {loaded ? \n              <WeatherCard data={weatherData} unit={unit} toMenu={this.toMenu} />\n            :\n              <div>\n                <input type=\"text\" onChange={(event) => this.setState({city: event.target.value})} placeholder=\"City name\" className=\"p-2 rounded text-black text-center\"></input>\n                <img src={sun} className=\"loading my-6 mx-auto\" alt=\"sun\" />\n                <button className=\"button\" onClick={this.getWeather}>Get Weather</button>\n              </div>\n          }\n      </Layout>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}