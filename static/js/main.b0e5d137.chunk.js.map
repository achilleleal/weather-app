{"version":3,"sources":["svg/github-logo.svg","svg/rain.svg","svg/sun.svg","components/Footer.js","components/ForecastCard.js","components/WeatherCard.js","components/ErrorCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","className","role","aria-label","href","src","github","alt","ForecastCard","forecast","temp","icon","toUpperCase","WeatherCard","capitalizeFirstLetter","string","charAt","slice","state","loaded","futureForecast","fetch","this","props","SERVER","method","headers","body","JSON","stringify","city","data","then","res","json","setState","catch","err","console","log","weather","feels_like","toMenu","error","map","day","index","toLowerCase","class","onClick","Component","ErrorCard","style","maxWidth","rain","App","getWeather","trim","weatherData","status","type","value","onChange","event","target","placeholder","sun","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b0e5d137.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github-logo.f1e77217.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.d1668868.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun.fdd37e8a.svg\";","import React from \"react\";\nimport github from '../svg/github-logo.svg';\n\nconst Footer = () =>\n    <footer className=\"text-white text-center pt-4 pb-2\">\n      <h3>Made with <span role=\"img\" aria-label=\"love\">❤️</span> by Sebastián Leal, 2020</h3>\n      <nav className=\"flex justify-center my-2\">\n        <a href=\"https://github.com/achilleleal/weather-app\">\n          <img src={github} alt=\"github\" className=\"w-8 duration-300 transform hover:scale-110\"/>\n        </a>\n      </nav>\n    </footer>\n\n\nexport default Footer;","import React from 'react';\n\nconst ForecastCard = ({ forecast, temp, icon, className }) => {\n    return (\n        <div className={`mx-auto rounded p-2 bg-purple-900 text-md w-full  ${className}`}>\n            <h1>{forecast.toUpperCase()}</h1>\n            <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} className=\"mx-auto w-12 md:w-24\" alt=\"\"/>\n            <h1>{temp}º</h1>\n        </div>\n    );\n};\n\nexport default ForecastCard;","import React, { Component } from 'react';\nimport ForecastCard from './ForecastCard';\n\n\nclass WeatherCard extends Component {\n    constructor() {\n        super();\n        this.state = {\n            loaded: false,\n            futureForecast: []\n        }\n    }\n\n\n    componentDidMount() {\n        fetch(`${this.props.SERVER}/forecast`, {\n            method: 'post',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n              city: this.props.data.city\n            })\n          })\n          .then(res => res.json())\n          .then(data => this.setState({futureForecast: data, loaded: true}))\n          .catch(err => console.log(err));\n    }\n\n\n    // The description is all in lower case. This function capitalizes only the first letter, for formatting\n    capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n\n    render() {\n        \n    const { city, weather, temp, feels_like, icon } = this.props.data;\n    const { toMenu } = this.props;\n    const { futureForecast, loaded } = this.state;\n\n    return(\n        <div>\n            <div className=\"card mt-4 sm:mt-0\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 card-item mb-2 p-2\">\n                    <div className=\"font-bold flex items-center justify-center\">\n                        <h1 className=\"md:ml-4 text-3xl sm:text-4xl lg:text-5xl\">{city}</h1>\n                    </div>\n                    <div className=\"flex items-center justify-center\">\n                        <div>\n                            <h1 className=\"text-3xl sm:text-4xl lg:text-5xl font-bold\">{temp}º</h1>\n                            <h3 className=\"text-md sm:text-xl\">Feels like {feels_like}º</h3>\n                        </div>\n                    </div>\n                    <div>\n                        <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} \n                                                alt=''\n                                                className=\"w-16 md:w-24 mx-auto\"/> \n                        <h2 className=\"sm:text-2xl lg:text-3xl\">{this.capitalizeFirstLetter(weather)}</h2>\n                    </div>\n                </div>\n\n                <div className=\"card-item p-4\">\n                    <h1 className=\"mb-2 text-xl md:text-3xl\">5 day forecast</h1>\n                    {loaded ?\n\n                        <div className=\"grid gap-4 grid-cols-2 md:grid-cols-5\">\n                            {futureForecast.error ? \n                            \n                            <p className=\"error col-span-5\">{futureForecast.error}</p>\n                            \n                             :\n                            \n                            futureForecast.map((day, index) => \n                                <ForecastCard \n                                    forecast={day.forecast.toLowerCase()}\n                                    temp={day.temp}\n                                    icon={day.icon}\n                                    className={index === 0 ? 'col-span-2 md:col-span-1' : ''}\n                                    />\n                                    \n                                )\n                            }\n                        </div>\n\n                        :\n                        <>\n                            <p>Loading...</p>\n                            <div class=\"loader mx-auto\"></div> \n                        </>\n                    }\n                </div>\n            </div>\n            \n            <div className=\"flex mb-4 sm:mb-0\">\n                <button onClick={toMenu} className=\"button\">To menu</button>\n            </div>\n        </div>\n    );\n}}\n    \n\nexport default WeatherCard;\n","import React from 'react';\nimport rain from '../svg/rain.svg'\n\nconst ErrorCard = ({ toMenu, error }) =>\n    <div>\n        <div className=\"card\" style={{maxWidth: '500px'}}>\n            <div className=\"card-item p-4\">\n                <h1 className=\"text-2xl\">Oops, something went wrong.</h1>\n                <img src={rain} alt=\"\" className=\"w-16 mx-auto my-4\" />\n                <p className=\"error\">{error}</p>\n            </div>\n        </div>\n        <div className=\"flex\">\n            <button onClick={toMenu} className=\"button\">Try again</button>\n        </div>\n    </div>\n\nexport default ErrorCard;","import React, { Component } from 'react';\nimport Footer from './components/Footer';\nimport WeatherCard from './components/WeatherCard';\nimport ErrorCard from './components/ErrorCard';\nimport sun from './svg/sun.svg';\nimport './styles/App.css';\nimport './styles/styles.css';\n\n// Link where the server is running.\nconst SERVER = \"https://weather-apiserver.herokuapp.com\"\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      loaded: false,\n      city: '',\n      weatherData: {},\n    }\n  }\n\n\n  toMenu = () => {\n    this.setState({loaded: false})\n  }\n\n\n  getWeather = () => {\n    if (this.state.city.trim()) {\n      fetch(`${SERVER}/weather`, {\n        method: 'post',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n          city: this.state.city\n        })\n      })\n      .then(res => res.json())\n      .then(data => {\n        this.setState({weatherData: data, loaded: true});\n      })\n      .catch(err => console.log(err));\n    }\n  }\n\n\n\n  render() {\n\n    const { loaded, weatherData } = this.state;\n    \n    return (\n      <>\n        <main className=\"flex justify-center items-center\">\n          <div>\n            {loaded ? \n\n                (weatherData.status ? \n                  <WeatherCard data={weatherData} toMenu={this.toMenu} SERVER={SERVER} />\n                    :\n                  <ErrorCard toMenu={this.toMenu} error={weatherData.error} />\n                )\n\n              :\n\n                <div>\n                  <div className=\"flex\">\n                    <input type=\"text\" value={this.state.city} onChange={(event) => this.setState({city: event.target.value})} placeholder=\"Enter a city name\" className=\"py-2 px-4 mx-auto rounded text-black text-center\" />\n                  </div>\n                  <img src={sun} className=\"spinning-sun my-6 mx-auto\" alt=\"\" />\n                  <div className=\"flex\">\n                    <button className=\"button mx-auto\" onClick={this.getWeather}>Get Weather</button>\n                  </div>\n                </div>\n                \n            }\n          </div>\n        </main>\n        <Footer />\n      </>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}