{"version":3,"sources":["sun.svg","WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","degree","WeatherCard","name","weather","main","unit","className","src","icon","alt","description","temp","feels_like","App","getWeather","fetch","state","then","res","json","data","console","log","setState","weatherData","loaded","catch","this","logo","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,iC,yMCEvCC,EAAS,QAwBEC,EAtBK,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,KAIjC,MAFa,aAFoC,EAAVC,OAEdL,EAAS,SAG9B,yBAAKM,UAAU,wBACX,6BACI,4BAAKJ,GACL,yBAAKK,IAAG,+CAA0CJ,EAAQ,GAAGK,MACxDC,IAAKN,EAAQ,GAAGC,KAChBE,UAAU,OACf,4BAAKH,EAAQ,GAAGC,MAChB,2BAAID,EAAQ,GAAGO,cAEnB,6BACI,4BAAKN,EAAKO,KAAV,IAAiBX,EAAjB,gBAAsCI,EAAKQ,WAA3C,IAAwDZ,M,gBCkCzDa,G,8DA3Cb,aAAe,IAAD,8BACZ,gBAQFC,WAAa,WACXC,MAAM,mEAAD,OAdG,GAcH,kBAAiF,EAAKC,MAAMX,OAChGY,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACC,YAAaJ,EAAMK,QAAQ,OAE3CC,MAAML,QAAQC,MAdf,EAAKN,MAAQ,CACXS,QAAQ,EACRpB,KAAM,SACNmB,YAAa,IALH,E,qDAmBJ,IAAD,EACkBG,KAAKX,MAAtBS,EADD,EACCA,OAAQpB,EADT,EACSA,KADT,EAEyBsB,KAAKX,MAAMQ,YAAnCtB,EAFD,EAECA,KAAMC,EAFP,EAEOA,QAASC,EAFhB,EAEgBA,KAEvB,OACE,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cACfmB,EACG,kBAAC,EAAD,CAAavB,KAAMA,EAAMC,QAASA,EAASC,KAAMA,EAAMC,KAAMA,IAE7D,6BACE,yBAAKE,IAAKqB,IAAMtB,UAAU,WAAWG,IAAI,SACzC,wBAAIH,UAAU,gBAAd,cACA,4BAAQuB,QAASF,KAAKb,YAAtB,sB,GAlCEgB,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.babb4110.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sun.fdd37e8a.svg\";","import React from 'react'\n\nlet degree = \"ºC\";\n\nconst WeatherCard = ({name, weather, main, unit}) => {\n\n    if (unit === \"imperial\") degree = \"ºF\";\n\n    return(\n        <div className=\"bg-dark-blue br4 pa4\">\n            <div>\n                <h1>{name}</h1>\n                <img src={`https://api.openweathermap.org/img/w/${weather[0].icon}`} \n                     alt={weather[0].main}\n                     className=\"w3\"/>\n                <h2>{weather[0].main}</h2>\n                <p>{weather[0].description}</p>\n            </div>\n            <div>\n                <h3>{main.temp} {degree}, feels like {main.feels_like} {degree}</h3>\n            </div>\n        </div>\n    );\n}\n    \n\nexport default WeatherCard;\n","import React, { Component } from 'react';\nimport WeatherCard from './WeatherCard';\nimport logo from './sun.svg';\nimport './App.css';\nimport './styles/style.css';\n\nconst key = \"\";\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      loaded: false,\n      unit: \"metric\", //Tells the API to fetch in this measurement system\n      weatherData: {}\n    }\n  }\n\n  getWeather = () => {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=Caracas&appid=${key}&units=${this.state.unit}`)\n    .then(res => res.json())\n    .then(data => {\n      console.log(data);\n      this.setState({weatherData: data, loaded: true})\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    const { loaded, unit } = this.state;\n    const { name, weather, main } = this.state.weatherData;\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {loaded ? \n              <WeatherCard name={name} weather={weather} main={main} unit={unit} />\n            :\n              <div>\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <h2 className=\"text-red-700\">Loading...</h2>\n                <button onClick={this.getWeather}>Get Weather</button>\n              </div>\n          }\n        </header>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}